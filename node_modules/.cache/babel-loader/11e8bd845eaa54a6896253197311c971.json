{"ast":null,"code":"var _jsxFileName = \"/home/emily/gametrivia/src/pages/Feedback.jsx\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport Header from '../Components/Header';\nimport '../styles/Feedback.css';\nimport '../styles/index.css';\n\nclass Feedback extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.getAvatar = playerEmail => {\n      const hash = md5(playerEmail).toString();\n      const imagem = `https://www.gravatar.com/avatar/${hash}`;\n      return imagem;\n    };\n\n    this.handleUsersScore = () => {\n      const {\n        totalScore,\n        playerName,\n        playerEmail\n      } = this.props;\n      const avatar = this.getAvatar(playerEmail);\n      const currData = {\n        totalScore,\n        playerName,\n        avatar\n      };\n\n      if (localStorage.getItem('usersRanking') === null) {\n        localStorage.setItem('usersRanking', JSON.stringify([currData]));\n      } else {\n        const oldData = localStorage.getItem('usersRanking');\n        const recuperedData = JSON.parse(oldData);\n        const newArray = [...recuperedData, currData];\n        localStorage.setItem('usersRanking', JSON.stringify(newArray));\n      }\n    };\n\n    this.handlePlayAgain = () => {\n      const {\n        history\n      } = this.props;\n      history.push('/');\n    };\n\n    this.message = () => {\n      const {\n        totalAssertions\n      } = this.props;\n      const mediumResult = 3;\n      if (totalAssertions < mediumResult) return 'Could be better...';\n      if (totalAssertions >= mediumResult) return 'Well Done!';\n    };\n\n    this.handleGoRanking = () => {\n      const {\n        history\n      } = this.props;\n      history.push('/ranking');\n    };\n  }\n\n  componentDidMount() {\n    this.handleUsersScore();\n  }\n\n  render() {\n    // const { totalAssertions, totalScore } = this.props;\n    const {\n      totalScore,\n      playerName,\n      playerEmail,\n      totalAssertions\n    } = this.props;\n    console.log('totalScore: ', totalScore);\n    console.log('playerName: ', playerName);\n    console.log('playerEmail: ', playerEmail);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"feedback-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"feedback-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, this.message()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"feedback-score-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, 'Final Score: ', /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-score\",\n      className: \"feedback-score-span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, totalScore)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, 'Total Assertions: ', /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-question\",\n      className: \"feedback-score-span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, totalAssertions))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"feedback-buttons-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"btn-play-again\",\n      type: \"button\",\n      onClick: this.handlePlayAgain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Jogar novamente\"), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"btn-ranking\",\n      type: \"button\",\n      onClick: this.handleGoRanking,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Ranking\"))));\n  }\n\n}\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  totalAssertions: PropTypes.number.isRequired,\n  totalScore: PropTypes.number.isRequired,\n  playerName: PropTypes.string.isRequired,\n  playerEmail: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = store => ({\n  totalAssertions: store.player.assertions,\n  totalScore: store.player.score,\n  playerName: store.player.name,\n  playerEmail: store.player.gravatarEmail\n});\n\nexport default connect(mapStateToProps)(Feedback);","map":{"version":3,"sources":["/home/emily/gametrivia/src/pages/Feedback.jsx"],"names":["PropTypes","React","Component","connect","md5","Header","Feedback","getAvatar","playerEmail","hash","toString","imagem","handleUsersScore","totalScore","playerName","props","avatar","currData","localStorage","getItem","setItem","JSON","stringify","oldData","recuperedData","parse","newArray","handlePlayAgain","history","push","message","totalAssertions","mediumResult","handleGoRanking","componentDidMount","render","console","log","propTypes","shape","func","isRequired","number","string","mapStateToProps","store","player","assertions","score","name","gravatarEmail"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport Header from '../Components/Header';\nimport '../styles/Feedback.css';\nimport '../styles/index.css';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    this.handleUsersScore();\n  }\n\n  getAvatar = (playerEmail) => {\n    const hash = md5(playerEmail).toString();\n    const imagem = `https://www.gravatar.com/avatar/${hash}`;\n    return imagem;\n  }\n\n  handleUsersScore = () => {\n    const { totalScore, playerName, playerEmail } = this.props;\n    const avatar = this.getAvatar(playerEmail);\n    const currData = {\n      totalScore,\n      playerName,\n      avatar,\n    };\n\n    if (localStorage.getItem('usersRanking') === null) {\n      localStorage.setItem('usersRanking', JSON.stringify([currData]));\n    } else {\n      const oldData = localStorage.getItem('usersRanking');\n      const recuperedData = JSON.parse(oldData);\n      const newArray = [...recuperedData, currData];\n      localStorage.setItem('usersRanking', JSON.stringify(newArray));\n    }\n  }\n\n  handlePlayAgain = () => {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  message = () => {\n    const { totalAssertions } = this.props;\n    const mediumResult = 3;\n    if (totalAssertions < mediumResult) return 'Could be better...';\n    if (totalAssertions >= mediumResult) return 'Well Done!';\n  }\n\n  handleGoRanking = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  };\n\n  render() {\n    // const { totalAssertions, totalScore } = this.props;\n    const { totalScore, playerName, playerEmail, totalAssertions } = this.props;\n    console.log('totalScore: ', totalScore);\n    console.log('playerName: ', playerName);\n    console.log('playerEmail: ', playerEmail);\n    return (\n      <>\n        <Header />\n        <div className=\"feedback-container\">\n          <h2 data-testid=\"feedback-text\">{this.message()}</h2>\n\n          <div className=\"feedback-score-container\">\n            <p>\n              {'Final Score: '}\n              <span\n                data-testid=\"feedback-total-score\"\n                className=\"feedback-score-span\"\n              >\n                {totalScore}\n              </span>\n            </p>\n\n            <p>\n              {'Total Assertions: '}\n              <span\n                data-testid=\"feedback-total-question\"\n                className=\"feedback-score-span\"\n              >\n                {totalAssertions}\n              </span>\n            </p>\n          </div>\n\n          <div className=\"feedback-buttons-container\">\n            <button\n              data-testid=\"btn-play-again\"\n              type=\"button\"\n              onClick={ this.handlePlayAgain }\n            >\n              Jogar novamente\n            </button>\n\n            <button\n              data-testid=\"btn-ranking\"\n              type=\"button\"\n              onClick={ this.handleGoRanking }\n            >\n              Ranking\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  totalAssertions: PropTypes.number.isRequired,\n  totalScore: PropTypes.number.isRequired,\n  playerName: PropTypes.string.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (store) => ({\n  totalAssertions: store.player.assertions,\n  totalScore: store.player.score,\n  playerName: store.player.name,\n  playerEmail: store.player.gravatarEmail,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}