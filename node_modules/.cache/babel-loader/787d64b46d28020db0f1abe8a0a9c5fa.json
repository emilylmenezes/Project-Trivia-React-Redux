{"ast":null,"code":"var _jsxFileName = \"/home/emily/gametrivia/src/pages/Game.jsx\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../Components/Header';\nimport { savePlayerScore, saveAssertions } from '../redux/actions';\nimport Loading from '../Components/Loading';\nimport '../styles/Game.css';\nimport '../styles/index.css';\n\nclass Game extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      timer: 30,\n      questions: [],\n      order: 0,\n      load: false,\n      answered: false,\n      showNextButton: false,\n      lastQuestion: false,\n      shuffleAnswers: []\n    };\n\n    this.requestQuests = async () => {\n      const {\n        getToken\n      } = this.props;\n      const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${getToken}`);\n      const json = await response.json();\n      if (json.response_code === 0) this.sucessRequest(json.results);\n      if (json.response_code !== 0) this.failedRequest();\n    };\n\n    this.sucessRequest = results => {\n      const shuffleAnswers = results.map(result => this.shuffleAnswers([...result.incorrect_answers, result.correct_answer]));\n      this.setState({\n        questions: results,\n        load: true,\n        shuffleAnswers\n      });\n    };\n\n    this.failedRequest = () => {\n      const {\n        history\n      } = this.props;\n      localStorage.removeItem('token');\n      history.push('/');\n    };\n\n    this.handleNextQuestion = () => {\n      const numberMaxQuestions = 4;\n      this.setState(previousState => ({\n        order: previousState.order < numberMaxQuestions ? previousState.order + 1 : 0,\n        lastQuestion: previousState.order === numberMaxQuestions,\n        showNextButton: false,\n        answered: false,\n        timer: 30\n      }));\n    };\n\n    this.handleQuestionResults = () => {\n      const {\n        questions,\n        order\n      } = this.state;\n      const allOptions = document.querySelectorAll('.question');\n      allOptions.forEach(option => {\n        const isCorrect = option.innerText === questions[order].correct_answer;\n        if (isCorrect) option.classList.add('rigth-question');\n        if (!isCorrect) option.classList.add('wrong-question');\n      });\n    };\n\n    this.getDifficultyMultiplier = difficulty => {\n      const easyPoints = 1;\n      const mediumPoints = 2;\n      const hardPoints = 3;\n      if (difficulty === 'easy') return easyPoints;\n      if (difficulty === 'medium') return mediumPoints;\n      if (difficulty === 'hard') return hardPoints;\n    };\n\n    this.handleScore = difficulty => {\n      const {\n        timer\n      } = this.state;\n      const {\n        updateScore,\n        updateAssertions\n      } = this.props;\n      const currDifficulty = this.getDifficultyMultiplier(difficulty);\n      const defaultPoints = 10;\n      updateScore(defaultPoints + timer * currDifficulty);\n      updateAssertions();\n    };\n\n    this.handleClick = target => {\n      const {\n        questions,\n        order,\n        answered\n      } = this.state;\n      const answeredCorrectly = target.innerHTML === questions[order].correct_answer;\n      if (answeredCorrectly && !answered) this.handleScore(questions[order].difficulty);\n      this.setState({\n        showNextButton: true,\n        answered: true\n      });\n      this.handleQuestionResults();\n    };\n\n    this.handleDataTestId = (currQuestion, index) => {\n      const {\n        questions,\n        order\n      } = this.state;\n      const correctAnswer = questions[order].correct_answer;\n\n      if (currQuestion === correctAnswer) {\n        return 'correct-answer';\n      }\n\n      return `wrong-answer-${index}`;\n    };\n\n    this.handleQuestions = allQuestions => {\n      const {\n        answered,\n        timer\n      } = this.state;\n      return allQuestions.map((currQuestion, index) => /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: _ref => {\n          let {\n            target\n          } = _ref;\n          return this.handleClick(target, currQuestion);\n        },\n        \"data-testid\": this.handleDataTestId(currQuestion, index),\n        key: currQuestion,\n        disabled: answered || timer === 0,\n        className: \"question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }\n      }, currQuestion));\n    };\n\n    this.shuffleAnswers = array => {\n      const number = 0.5;\n      return array.sort(() => Math.round(Math.random()) - number);\n    };\n\n    this.renderQuestion = (questions, order) => {\n      const {\n        shuffleAnswers\n      } = this.state;\n      const question = shuffleAnswers[order];\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n        \"data-testid\": \"question-category\",\n        className: \"question-category\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, questions[order].category), /*#__PURE__*/React.createElement(\"p\", {\n        \"data-testid\": \"question-text\",\n        className: \"question-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }\n      }, questions[order].question), /*#__PURE__*/React.createElement(\"div\", {\n        \"data-testid\": \"answer-options\",\n        className: \"answer-options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }\n      }, this.handleQuestions(question)));\n    };\n\n    this.handleTimer = () => {\n      const {\n        timer,\n        answered\n      } = this.state;\n\n      if (timer > 0 && !answered) {\n        this.timer = setTimeout(() => {\n          this.setState({\n            timer: timer - 1\n          });\n        }, '1000');\n      }\n\n      if (answered || timer === 0) clearInterval(this.timer);\n    };\n  }\n\n  componentDidMount() {\n    this.requestQuests();\n  }\n\n  componentDidUpdate() {\n    this.handleTimer();\n  }\n\n  render() {\n    const {\n      load,\n      questions,\n      order,\n      showNextButton,\n      timer,\n      lastQuestion\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"game-timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, timer), lastQuestion && /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 29\n      }\n    }), load && questions.length > 0 ? this.renderQuestion(questions, order) : /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }), (showNextButton || timer === 0) && /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      className: \"next-button\",\n      onClick: this.handleNextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, \"Pr\\xF3xima Quest\\xE3o\")));\n  }\n\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  getToken: PropTypes.string.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  updateAssertions: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => ({\n  getToken: store.apiToken.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateScore: score => dispatch(savePlayerScore(score)),\n  updateAssertions: () => dispatch(saveAssertions())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/emily/gametrivia/src/pages/Game.jsx"],"names":["PropTypes","React","Component","connect","Redirect","Header","savePlayerScore","saveAssertions","Loading","Game","state","timer","questions","order","load","answered","showNextButton","lastQuestion","shuffleAnswers","requestQuests","getToken","props","response","fetch","json","response_code","sucessRequest","results","failedRequest","map","result","incorrect_answers","correct_answer","setState","history","localStorage","removeItem","push","handleNextQuestion","numberMaxQuestions","previousState","handleQuestionResults","allOptions","document","querySelectorAll","forEach","option","isCorrect","innerText","classList","add","getDifficultyMultiplier","difficulty","easyPoints","mediumPoints","hardPoints","handleScore","updateScore","updateAssertions","currDifficulty","defaultPoints","handleClick","target","answeredCorrectly","innerHTML","handleDataTestId","currQuestion","index","correctAnswer","handleQuestions","allQuestions","array","number","sort","Math","round","random","renderQuestion","question","category","handleTimer","setTimeout","clearInterval","componentDidMount","componentDidUpdate","render","length","propTypes","shape","func","isRequired","string","mapStateToProps","store","apiToken","token","mapDispatchToProps","dispatch","score"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../Components/Header';\nimport { savePlayerScore, saveAssertions } from '../redux/actions';\nimport Loading from '../Components/Loading';\nimport '../styles/Game.css';\nimport '../styles/index.css';\n\nclass Game extends Component {\n  state = {\n    timer: 30,\n    questions: [],\n    order: 0,\n    load: false,\n    answered: false,\n    showNextButton: false,\n    lastQuestion: false,\n    shuffleAnswers: [],\n  };\n\n  componentDidMount() {\n    this.requestQuests();\n  }\n\n  componentDidUpdate() {\n    this.handleTimer();\n  }\n\n  requestQuests = async () => {\n    const { getToken } = this.props;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${getToken}`);\n    const json = await response.json();\n    if (json.response_code === 0) this.sucessRequest(json.results);\n    if (json.response_code !== 0) this.failedRequest();\n  };\n\n  sucessRequest = (results) => {\n    const shuffleAnswers = results.map((result) => this.shuffleAnswers(\n      [...result.incorrect_answers, result.correct_answer],\n    ));\n    this.setState({ questions: results, load: true, shuffleAnswers });\n  };\n\n  failedRequest = () => {\n    const { history } = this.props;\n    localStorage.removeItem('token');\n    history.push('/');\n  };\n\n  handleNextQuestion = () => {\n    const numberMaxQuestions = 4;\n    this.setState((previousState) => ({\n      order:\n        previousState.order < numberMaxQuestions ? previousState.order + 1 : 0,\n      lastQuestion: previousState.order === numberMaxQuestions,\n      showNextButton: false,\n      answered: false,\n      timer: 30,\n    }));\n  };\n\n  handleQuestionResults = () => {\n    const { questions, order } = this.state;\n    const allOptions = document.querySelectorAll('.question');\n    allOptions.forEach((option) => {\n      const isCorrect = option.innerText === questions[order].correct_answer;\n      if (isCorrect) option.classList.add('rigth-question');\n      if (!isCorrect) option.classList.add('wrong-question');\n    });\n  }\n\n  getDifficultyMultiplier = (difficulty) => {\n    const easyPoints = 1;\n    const mediumPoints = 2;\n    const hardPoints = 3;\n    if (difficulty === 'easy') return easyPoints;\n    if (difficulty === 'medium') return mediumPoints;\n    if (difficulty === 'hard') return hardPoints;\n  };\n\n  handleScore = (difficulty) => {\n    const { timer } = this.state;\n    const { updateScore, updateAssertions } = this.props;\n    const currDifficulty = this.getDifficultyMultiplier(difficulty);\n    const defaultPoints = 10;\n    updateScore(defaultPoints + (timer * currDifficulty));\n    updateAssertions();\n  }\n\n  handleClick = (target) => {\n    const { questions, order, answered } = this.state;\n    const answeredCorrectly = target.innerHTML === questions[order].correct_answer;\n    if (answeredCorrectly && !answered) this.handleScore(questions[order].difficulty);\n    this.setState({\n      showNextButton: true,\n      answered: true,\n    });\n    this.handleQuestionResults();\n  }\n\n  handleDataTestId = (currQuestion, index) => {\n    const { questions, order } = this.state;\n    const correctAnswer = questions[order].correct_answer;\n    if (currQuestion === correctAnswer) {\n      return 'correct-answer';\n    }\n    return `wrong-answer-${index}`;\n  };\n\n  handleQuestions = (allQuestions) => {\n    const { answered, timer } = this.state;\n    return allQuestions.map((currQuestion, index) => (\n      <button\n        type=\"button\"\n        onClick={ ({ target }) => this.handleClick(target, currQuestion) }\n        data-testid={ this.handleDataTestId(currQuestion, index) }\n        key={ currQuestion }\n        disabled={ answered || timer === 0 }\n        className=\"question\"\n      >\n        { currQuestion }\n      </button>\n    ));\n  }\n\n  shuffleAnswers = (array) => {\n    const number = 0.5;\n    return array.sort(() => Math.round(Math.random()) - number);\n  };\n\n  renderQuestion = (questions, order) => {\n    const { shuffleAnswers } = this.state;\n    const question = shuffleAnswers[order];\n    return (\n      <>\n        <p\n          data-testid=\"question-category\"\n          className=\"question-category\"\n        >\n          {questions[order].category}\n        </p>\n        <p\n          data-testid=\"question-text\"\n          className=\"question-text\"\n        >\n          {questions[order].question}\n        </p>\n        <div\n          data-testid=\"answer-options\"\n          className=\"answer-options\"\n        >\n          { this.handleQuestions(question) }\n        </div>\n      </>\n    );\n  };\n\n  handleTimer = () => {\n    const { timer, answered } = this.state;\n    if (timer > 0 && !answered) {\n      this.timer = setTimeout(() => {\n        this.setState({\n          timer: timer - 1,\n        });\n      }, '1000');\n    }\n    if (answered || timer === 0) clearInterval(this.timer);\n  }\n\n  render() {\n    const {\n      load,\n      questions,\n      order,\n      showNextButton,\n      timer,\n      lastQuestion,\n    } = this.state;\n\n    return (\n      <>\n        <Header />\n        <main>\n          <h1 className=\"game-timer\">{timer}</h1>\n          { lastQuestion && <Redirect to=\"/feedback\" /> }\n          {load && questions.length > 0 ? (\n            this.renderQuestion(questions, order)\n          ) : (\n            <Loading />\n          )}\n          {(showNextButton || timer === 0) && (\n            <button\n              data-testid=\"btn-next\"\n              type=\"button\"\n              className=\"next-button\"\n              onClick={ this.handleNextQuestion }\n            >\n              Próxima Questão\n            </button>\n          )}\n        </main>\n      </>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  getToken: PropTypes.string.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  updateAssertions: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (store) => ({\n  getToken: store.apiToken.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (score) => dispatch(savePlayerScore(score)),\n  updateAssertions: () => dispatch(saveAssertions()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}